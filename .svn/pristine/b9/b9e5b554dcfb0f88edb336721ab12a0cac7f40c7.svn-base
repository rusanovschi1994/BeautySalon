package com.iucosoft.beautysalon.view;

import com.iucosoft.beautysalon.dao.UserDaoIntf;
import com.iucosoft.beautysalon.dao.impl.UserDaoImpl;
import com.iucosoft.beautysalon.models.User;
import com.iucosoft.beautysalon.models.UserRole;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;

/**
 * FXML Controller class
 *
 * @author Rusanovschi
 */
public class FXMLUserController implements Initializable, FormularIntf<User> {

    @FXML
    private TextField tfUserName;
    @FXML
    private TextField tfLoghin;
    @FXML
    private TextField tfUserId;
    @FXML
    private TextField tfPassword;
    @FXML
    private ComboBox<UserRole> tfusersRoles;
    @FXML
    private TableView<User> tableview;
    @FXML
    private TableColumn<User, Integer> tableId;
    @FXML
    private TableColumn<User, String> tableName;
    @FXML
    private TableColumn<User, String> tableLogin;
    @FXML
    private TableColumn<UserRole, Enum> tableRole;
    @FXML
    private TableColumn<User, String> tablePassword;

    UserDaoIntf usersService;
    ObservableList<User> oL = FXCollections.observableArrayList();

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        
        cellUsersValueFactory();
        
        try {
            // TODO
            usersService = new UserDaoImpl();
            refreshList();
            clearForm();
        } catch (SQLException ex) {
            Logger.getLogger(FXMLCustomerController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshList() throws SQLException {
        tableview.getItems().clear();
        oL = FXCollections.observableArrayList(usersService.findAll());
        tableview.setItems(oL);
    }

    @FXML
    private void handleSearchAction(ActionEvent event) {
        int id = Integer.parseInt(tfUserId.getText());
        String userName = tfUserName.getText();
        User usersId = null;
        List<User> usersName = null;
        try {
            if (id > 0) {
                usersId = usersService.findById(id);
                fillForm(usersId);
            } else if (userName != null) {
                usersName = usersService.findAll(userName, true);
                showSearchResult(usersName);
            } else {
                showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                        "Indica»õi metoda de cautare <<ID>> SAU <<NUME, PRENUME>>");
            }
        } catch (SQLException ex) {
            showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Utilizatorul cu id-ul, " + id + " nu a fost gasit \n" + ex.getMessage());
        }
    }

    private void showSearchResult(List<User> userName) {

        if (userName.size() == 0) {
            showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Utilizatorul cu numele, " + tfUserName.getText().toUpperCase() + " nu exista");
        } else if (userName.size() == 1) {
            fillForm(userName.get(0));
            System.out.println("Utilizatorul a fost gasit");
        } else {
            System.out.println("Au fost gasiti mai multi utilizatori cu acelasi nume");
        }
    }

    @FXML
    private void handleAddAction(ActionEvent event) {
        try {
            User user = readForm();
            usersService.save(user);
            showMessage(Alert.AlertType.INFORMATION, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Utilizatorul cu id-ul " + user.getId() + " a fost inregistrat cu succes");
            clearForm();
            refreshList();
        } catch (SQLException ex) {
            Logger.getLogger(FXMLCustomerController.class.getName()).log(Level.SEVERE, null, ex);
            showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Eroare la salvare \n" + ex.getMessage());
        }
    }

    @FXML
    private void handleUpdateAction(ActionEvent event) {
        int id = Integer.parseInt(tfUserId.getText());
        User userF = readForm();

        try {
            User userDB = usersService.findById(id);
            if (userDB != null) {

                userDB.setName(userF.getName());
                userDB.setLogin(userF.getLogin());
                userDB.setPassword(userF.getPassword());
                userDB.setUserRole(userF.getUserRole());

                usersService.update(userDB);
                showMessage(Alert.AlertType.INFORMATION, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                        "Utilizatorul cu numele *" + userDB.getName().toUpperCase() + "*, a fost actualizat cu succes");
                clearForm();
                refreshList();
            }
        } catch (SQLException ex) {
            showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Eroare la actualizarea utilizatorului \n" + ex.getMessage());
        }
    }

    @FXML
    private void handleClearAction(ActionEvent event) {
        clearForm();
    }

    @FXML
    private void handleDeleteAction(ActionEvent event) {
        int id = Integer.parseInt(tfUserId.getText());

        try {
            User customerDB = usersService.findById(id);
            if (customerDB != null) {
                usersService.delete(customerDB);
                showMessage(Alert.AlertType.INFORMATION, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                        "Utilizatorul *" + customerDB.getName().toUpperCase() + " a fost sters din BD");
                clearForm();
                refreshList();
            }
        } catch (SQLException ex) {
            showMessage(Alert.AlertType.ERROR, "ATENTIE!!!", "MESAJ INFORMATIONAL",
                    "Eroare in procesul de stergere \n" + ex.getMessage());
        }
    }

    @FXML
    private void handleExcelExportAction(ActionEvent event) {
    }

    @FXML
    private void handlePdfExportAction(ActionEvent event) {
    }

    @Override
    public void fillForm(User u) {
        UserRole ur = u.getUserRole();

        tfUserId.setText("" + u.getId());
        tfUserName.setText(u.getName());
        tfLoghin.setText(u.getLogin());
        tfPassword.setText(u.getPassword());
        tfusersRoles.setValue(ur);

    }

    @Override
    public User readForm() {
        User u = new User();

        u.setId(Integer.parseInt(tfUserId.getText()));
        u.setName(tfUserName.getText());
        u.setLogin(tfLoghin.getText());
        u.setPassword(tfPassword.getText());
        u.setUserRole(tfusersRoles.getValue());

        return u;
    }

    @Override
    public void clearForm() {
        tfUserId.setText("0");
        tfUserName.setText("");
        tfLoghin.setText("");
        tfPassword.setText("");
        tfusersRoles.setValue(UserRole.OPERATOR);
    }

    private void showMessage(Alert.AlertType type, String title, String headerText, String contentText) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(headerText);
        alert.setContentText(contentText);

        alert.showAndWait();
    }

    private void cellUsersValueFactory(){
        
        // crearea tabelei de date
        tableId.setCellValueFactory(new PropertyValueFactory<User, Integer>("id"));
        tableName.setCellValueFactory(new PropertyValueFactory<User, String>("name"));
        tableLogin.setCellValueFactory(new PropertyValueFactory<User, String>("login"));
        tablePassword.setCellValueFactory(new PropertyValueFactory<User, String>("password"));
        tableRole.setCellValueFactory(new PropertyValueFactory<UserRole, Enum>("userRole"));
        
        //Initierea tabelei cu coloanele indicate
        tableview.setItems(oL);

        //Initierea rolurilor in comboBox
        tfusersRoles.setItems(FXCollections.observableArrayList(UserRole.values()));
        
    }
}
