package com.iucosoft.beautysalon.fileservice.fileserviceDao;

import com.iucosoft.beautysalon.fileservice.CustomerFileServiceIntf;
import com.iucosoft.beautysalon.models.Customer;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Rusanovschi
 */
public class CustomerFileServiceImpl implements CustomerFileServiceIntf {

    @Override
    public void scrie(List<Customer> lista, String fileName) throws IOException {
        Workbook workbook = new XSSFWorkbook();//1
        Sheet creditSheet = workbook.createSheet("Clienti");//2

        int rowIndex = 0;

        Row rowTitlu = creditSheet.createRow(rowIndex++);
        int cellIndexTitlu = 0;

        CellStyle style = getBoldStyle(workbook);

        String[] titles = {"ID", "Nume/Prenume", "Telefon", "E-mail"};

        for (String title : titles) {
            createRowTitleBold(style, rowTitlu, cellIndexTitlu++, title);

        }
        for (Customer c : lista) {
            Row row = creditSheet.createRow(rowIndex++);

            int cellIndex = 0;
            row.createCell(cellIndex++).setCellValue(c.getId());
            row.createCell(cellIndex++).setCellValue(c.getName());
            row.createCell(cellIndex++).setCellValue(c.getPhoneNumber());
            row.createCell(cellIndex++).setCellValue(c.getEmail());
        }
        FileOutputStream fos = new FileOutputStream(fileName);
        workbook.write(fos);
        fos.close();
    }

    @Override
    public List<Customer> citeste(String fileName) throws IOException {
        List<Customer> lista = new ArrayList<>();

        FileInputStream fis = new FileInputStream(fileName);
        // Using XSSF for xlsx format, for xls use HSSF
        Workbook workbook = new XSSFWorkbook(fis);

        Sheet sheet = workbook.getSheetAt(0);

        Iterator rowIterator = sheet.iterator();

        if (rowIterator.hasNext()) {
            rowIterator.next(); // sarim peste titluri
        }

        //citire date din tabela
        while (rowIterator.hasNext()) {
            Row row = (Row) rowIterator.next();
            Iterator cellIterator = row.cellIterator();

            Customer c = new Customer();

            while (cellIterator.hasNext()) {

                Cell cell = (Cell) cellIterator.next();
                if (cell.getColumnIndex() == 0) {
                    c.setId((int) cell.getNumericCellValue());
                } else if (cell.getColumnIndex() == 1) {
                    c.setName(cell.getStringCellValue());
                } else if (cell.getColumnIndex() == 2) {
                    c.setPhoneNumber(cell.getStringCellValue());
                } else if (cell.getColumnIndex() == 4) {
                    c.setEmail(cell.getStringCellValue());
                }
            }
            lista.add(c);
        }
        fis.close();
        workbook.close();

        return lista;
    }
    
    private CellStyle getBoldStyle(Workbook workbook) {
        CellStyle style = workbook.createCellStyle();
        style.setBorderTop((short) 6); // double lines border
        style.setBorderBottom((short) 1); // single line border
        Font font = workbook.createFont();
        font.setFontHeightInPoints((short) 12);
        font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
        style.setFont(font);

        return style;
    }

    private void createRowTitleBold(CellStyle style, Row rowTitlu, int nr, String val) {
        Cell cell = rowTitlu.createCell(nr);
        cell.setCellValue(val);
        cell.setCellStyle(style);
    }
}
