package com.iucosoft.beautysalon.view;

import com.iucosoft.beautysalon.dao.CustomerDaoIntf;
import com.iucosoft.beautysalon.dao.RegistrationDaoIntf;
import com.iucosoft.beautysalon.dao.UserDaoIntf;
import com.iucosoft.beautysalon.dao.impl.CustomerDaoImpl;
import com.iucosoft.beautysalon.dao.impl.RegistrationDaoImpl;
import com.iucosoft.beautysalon.dao.impl.UserDaoImpl;
import com.iucosoft.beautysalon.models.Customer;
import com.iucosoft.beautysalon.models.OperationStatus;
import com.iucosoft.beautysalon.models.OperationType;
import com.iucosoft.beautysalon.models.Operation;
import com.iucosoft.beautysalon.models.User;
import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Tooltip;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;

/**
 * FXML Controller class
 *
 * @author Rusanovschi
 */
public class FXMLRegistrationController implements Initializable, FormularIntf<Operation> {

    @FXML
    private TextField tfNumberR;
    @FXML
    private DatePicker tfDateR;
    @FXML
    private ComboBox<OperationType> tfOperationR;
    @FXML
    private ComboBox<OperationStatus> tfStatusR;
    @FXML
    private TableView<Operation> tableView;
    @FXML
    private TableColumn<Operation, Integer> tableId;
    @FXML
    private TableColumn<Operation, Enum> tableServiciu;
    @FXML
    private TableColumn<Operation, Enum> tableStatus;
    @FXML
    private TableColumn<Operation, LocalDate> tableData;
    @FXML
    private ComboBox<Customer> tfCustomerName;
    @FXML
    private ComboBox<User> tfUserName;
    @FXML
    private TableColumn<Operation, String> tableCustomers;
    @FXML
    private TableColumn<Operation, String> tableUsers;

    RegistrationDaoIntf registrationService;
    ObservableList<Operation> obsL = FXCollections.observableArrayList();
    String filter = "";
    ObservableList<Customer> customersItems;
    ObservableList<User> usersItems;

    CustomerDaoIntf customerService;
    UserDaoIntf userService;
    private static final Logger LOG = Logger.getLogger(FXMLRegistrationController.class.getName());

    /**
     * Initializes the controller class.
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {

        try {
            cellOperationsValueFactory();
            registrationService = new RegistrationDaoImpl();
            customerService = new CustomerDaoImpl();
            userService = new UserDaoImpl();

            List<Customer> listCustomers = customerService.findAll();
            List<User> listUsers = userService.findAll();

            customersItems = FXCollections.observableList(listCustomers);

            usersItems = FXCollections.observableList(listUsers);
            tfUserName.setItems(usersItems);
            tfCustomerName.setItems(customersItems);

            try {
                refreshList();
                clearForm();
            } catch (SQLException ex) {
                Logger.getLogger(FXMLCustomerController.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FXMLRegistrationController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void refreshList() throws SQLException {
        tableView.getItems().clear();
        obsL = FXCollections.observableList(registrationService.getOperations());
        tableView.setItems(obsL);
    }

    @FXML
    private void handleSearchAction(ActionEvent event) {
        int id = Integer.parseInt(tfNumberR.getText());
        Operation operId = null;
        if (id > 0) {
            try {
                operId = registrationService.findById(id);
                fillForm(operId);
            } catch (SQLException ex) {
                showMessage(Alert.AlertType.ERROR,
                        "Înregistrare",
                        "MESAJ INFORMATIONAL",
                        "" + ex.getMessage());
                Logger.getLogger(FXMLRegistrationController.class.getName()).
                        log(Level.SEVERE, null, ex);
            }
        }
    }

    @FXML
    private void handleAddAction(ActionEvent event) {
        try {
            Operation operation = readForm();
            registrationService.inregistrare(operation);
            showMessage(Alert.AlertType.INFORMATION,
                    "Înregistrare",
                    "MESAJ INFORMATIONAL",
                    "Operațiunea cu id-ul " + operation.getId()
                    + " a fost inregistrată cu succes");
            clearForm();
            refreshList();
        } catch (SQLException ex) {
            showMessage(Alert.AlertType.ERROR,
                    "Înregistrare",
                    "MESAJ INFORMATIONAL",
                    "Eroare la salvare \n" + ex.getMessage());
            Logger.getLogger(FXMLCustomerController.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleUpdateAction(ActionEvent event) {
        int id = Integer.parseInt(tfNumberR.getText());
        Operation operationRF = readForm();
        
        try {
            Operation operationBD = registrationService.findById(id);
            if (operationBD != null) {

                operationBD.setCustomer(operationRF.getCustomer());
                operationBD.setUser(operationRF.getUser());
                operationBD.setOperationType(operationRF.getOperationType());
                operationBD.setOperationStatus(operationRF.getOperationStatus());
                operationBD.setLocalDate(operationRF.getLocalDate());

                registrationService.modificare(operationBD);

                showMessage(Alert.AlertType.INFORMATION,
                        "Modificare",
                        "MESAJ INFORMATIONAL",
                        "Modificarea operațiunii " + operationBD.getId()
                        + " a fost efectuată cu succe");
                clearForm();
                refreshList();
            }
        } catch (SQLException ex) {
            showMessage(Alert.AlertType.ERROR,
                    "Modificare",
                    "MESAJ INFORMATIONAL",
                    "Eroare la salvare \n" + ex.getMessage());
            Logger.getLogger(FXMLRegistrationController.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
    }

    @FXML
    private void handleClearAction(ActionEvent event) {
        clearForm();
    }

    @FXML
    private void handleExcelExportAction(ActionEvent event) {
    }

    @Override
    public void fillForm(Operation o) {
        Customer c = o.getCustomer();
        User u = o.getUser();
        OperationType oT = o.getOperationType();
        OperationStatus oS = o.getOperationStatus();
        LocalDate lD = o.getLocalDate();

        tfNumberR.setText("" + o.getId());
        tfCustomerName.setValue(c);
        tfUserName.setValue(u);
        tfOperationR.setValue(oT);
        tfStatusR.setValue(oS);
        tfDateR.setValue(lD);
    }

    //convertare Customer
    protected <T extends Customer> ComboBox<Customer> getCustomerComboBox(ObservableList<Customer> list) {
        ComboBox<Customer> customerComboBox = new ComboBox<>();
        customerComboBox.setItems(list);

        return customerComboBox;
    }

    //convertare User
    protected <T extends User> ComboBox<User> getUserComboBox(ObservableList<User> list) {
        ComboBox<User> userComboBox = new ComboBox<>();
        userComboBox.setItems(list);

        return userComboBox;
    }

    @Override
    public Operation readForm() {

        Operation operation = new Operation();

        try {

            //converisa 1
            Object nameId = tfCustomerName.getValue();
            String[] dataCust = ((String) nameId).split(":");
            int idCust = Integer.parseInt(dataCust[1]);
            //JOptionPane.showMessageDialog(null, "customer ID= "+idCust);  
            Customer customer = customerService.findById(idCust);

            //converisa 2
            Object userId = tfUserName.getValue();
            String[] dataUser = ((String) userId).split(":");
            int idUser = Integer.parseInt(dataUser[1]);
            //JOptionPane.showMessageDialog(null, "user ID= "+idUser);  
            User user = userService.findById(idUser);

            operation.setId(Integer.parseInt(tfNumberR.getText()));
            operation.setCustomer(customer);
            operation.setUser(user);
            operation.setOperationType(tfOperationR.getValue());
            operation.setOperationStatus(tfStatusR.getValue());
            operation.setLocalDate(tfDateR.getValue());

        } catch (Exception ex) {
            Logger.getLogger(FXMLRegistrationController.class.getName()).log(Level.SEVERE, null, ex);
        }
        return operation;
    }

    @Override
    public void clearForm() {
        tfNumberR.setText("0");
        tfCustomerName.setValue(null);
        tfUserName.setValue(null);
        tfOperationR.setValue(OperationType.CLASICA);
        tfStatusR.setValue(OperationStatus.INREGISTRAT);
        tfDateR.setValue(LocalDate.now());
    }

    @FXML
    public void handleOnKeyPressed(KeyEvent e
    ) {

        tfCustomerName.setTooltip(new Tooltip());
        tfCustomerName.getTooltip().setText("Please enter after remove text..");

//        List<Customer> list = new ArrayList<>();
        ObservableList<Customer> filteredList = null;
//        ObservableList<Customer> filteredList = FXCollections.observableArrayList(list);

        customersItems = FXCollections.observableArrayList();
        KeyCode code = e.getCode();

        if (code.isLetterKey()) {
            filter += e.getText();
        }
        if (code == KeyCode.BACK_SPACE && filter.length() > 0) {
            filter = filter.substring(0, filter.length() - 1);
            tfCustomerName.getItems().setAll(customersItems);
        }
        if (code == KeyCode.ESCAPE) {
            filter = "";
        }
        if (code == KeyCode.ENTER) {
            filter = "";
        }
        if (filter.length() == 0) {
            try {
                List<Customer> listCustomers = customerService.findAll();

                customersItems = FXCollections.observableArrayList(listCustomers);
                tfCustomerName.setItems(customersItems);

            } catch (SQLException ex) {
                LOG.severe(ex.getMessage());
            }
        } else {

            try {

                //filteredList = FXCollections.observableArrayList();
//              Stream<Customer> items = tfCustomerName.getItems().stream();
                String txtUsr = filter.toLowerCase();

                System.out.println("TxtUser = " + txtUsr);

                filteredList = FXCollections.observableList(customerService.findByName(filter));
                tfCustomerName.show();
                tfCustomerName.getItems().setAll(filteredList);

            } catch (SQLException ex) {
                LOG.severe(ex.getMessage());
            }
        }
    }

    @FXML
    private void handleOnHiding(Event e
    ) {
        filter = "";
        Customer s = tfCustomerName.getSelectionModel().getSelectedItem();

        if (s != null) {
            tfCustomerName.getItems().setAll(customersItems);
            tfCustomerName.getSelectionModel().select(s);
        }
    }

    @FXML
    private void handleOnKeyPressedUser(KeyEvent event
    ) {
        tfUserName.setTooltip(new Tooltip());
        tfUserName.getTooltip().setText("Please enter after remove text..");

        ObservableList<User> filteredList;
        customersItems = FXCollections.observableArrayList();

        KeyCode code = event.getCode();

        if (code.isLetterKey()) {
            filter += event.getText();
        }
        if (code == KeyCode.BACK_SPACE && filter.length() > 0) {
            filter = filter.substring(0, filter.length() - 1);
            tfUserName.getItems().setAll(usersItems);
        }
        if (code == KeyCode.ESCAPE) {
            filter = "";
        }
        if (code == KeyCode.ENTER) {
            filter = "";
        }
        if (filter.length() == 0) {
            try {
                List<User> listUsers = userService.findAll();

                usersItems = FXCollections.observableArrayList(listUsers);
                tfUserName.setItems(usersItems);

            } catch (SQLException ex) {
                LOG.severe(ex.getMessage());
            }
        } else {

            try {

                filteredList = FXCollections.observableArrayList();

                String txtUsr = filter.toLowerCase();

                System.out.println("TxtUser = " + txtUsr);

                filteredList.setAll(userService.findByName(filter));
                tfUserName.show();
                tfUserName.getItems().setAll(filteredList);

            } catch (SQLException ex) {
                LOG.severe(ex.getMessage());
            }
        }
    }

    @FXML
    private void handleOnHidingUser(Event event
    ) {
        filter = "";
        User u = tfUserName.getSelectionModel().getSelectedItem();

        if (u != null) {
            tfUserName.getItems().setAll(usersItems);
            tfUserName.getSelectionModel().select(u);
        }
    }

    @FXML
    private void handleActionRegistrationMouseClicked(MouseEvent event
    ) {
        if (event.getButton().equals(MouseButton.PRIMARY)) {
            fillForm(tableView.getFocusModel().getFocusedItem());
        }
    }

    private void showMessage(Alert.AlertType type, String title, String headerText, String contentText) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(headerText);
        alert.setContentText(contentText);

        alert.showAndWait();
    }

    private void cellOperationsValueFactory() {
        // crearea tabelei de date
        tableId.setCellValueFactory(new PropertyValueFactory<Operation, Integer>("id"));
        tableCustomers.setCellValueFactory(new PropertyValueFactory<Operation, String>("customer"));
        tableUsers.setCellValueFactory(new PropertyValueFactory<Operation, String>("user"));
        tableServiciu.setCellValueFactory(new PropertyValueFactory<Operation, Enum>("operationType"));
        tableStatus.setCellValueFactory(new PropertyValueFactory<Operation, Enum>("operationStatus"));
        tableData.setCellValueFactory(new PropertyValueFactory<Operation, LocalDate>("localDate"));

        //Initierea in comboBox
        tfOperationR.setItems(FXCollections.observableArrayList(OperationType.values()));
        tfStatusR.setItems(FXCollections.observableArrayList(OperationStatus.values()));
    }
}
