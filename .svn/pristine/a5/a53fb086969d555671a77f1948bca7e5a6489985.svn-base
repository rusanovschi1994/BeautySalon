package com.iucosoft.beautysalon.dao.impl;

import com.iucosoft.beautysalon.dao.CustomerDaoIntf;
import com.iucosoft.beautysalon.dao.MyDataSource;
import com.iucosoft.beautysalon.dao.RegistrationDaoIntf;
import com.iucosoft.beautysalon.models.Customer;
import com.iucosoft.beautysalon.models.Operation;
import com.iucosoft.beautysalon.models.OperationStatus;
import com.iucosoft.beautysalon.models.OperationType;
import com.iucosoft.beautysalon.models.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 *
 * @author Rusanovschi
 */
public class RegistrationDaoImpl implements RegistrationDaoIntf {

    private static final Logger LOG = Logger.getLogger(RegistrationDaoImpl.class.getName());
    private MyDataSource ds = MyDataSource.getInstance();
    CustomerDaoIntf customerIntf;

    @Override
    public void inregistrare(Operation o) throws SQLException {
        String sql = "INSERT INTO operations VALUES(null, ?, ?, ?, ?, ?)";

        try (
                Connection conn = ds.getConnection();
                PreparedStatement pstat = conn.prepareStatement(sql);) {

            pstat.setInt(1, o.getCustomer().getId());
            pstat.setInt(2, o.getUser().getId());
            pstat.setString(3, o.getOperationType().getTip());
            pstat.setString(4, o.getOperationStatus().getStatut());
            pstat.setDate(5, java.sql.Date.valueOf(o.getLocalDate()));
            pstat.executeUpdate();

        } catch (Exception e) {
            LOG.severe(e.toString());
            throw new SQLException(e.getMessage());
        }

    }

    @Override
    public void modificare(Operation o) throws SQLException {

//         String sql = "UPDATE users SET name = ?, login = ?, password = ?, role = ? WHERE userid =" + u.getId();
//
//        try (
//                Connection conn = ds.getConnection();
//                PreparedStatement pstat = conn.prepareStatement(sql);) {
//
//            pstat.setString(1, u.getName());
//            pstat.setString(2, u.getLogin());
//            pstat.setString(3, u.getPassword());
//            pstat.setString(4, u.getUsersRoles().getRole());
//            pstat.executeUpdate();
//        } catch (Exception e) {
//            LOG.severe(e.toString());
//            throw new SQLException(e.getMessage());
//        }
    }

    @Override
    public List<Operation> getOperations() throws SQLException {
        List<Operation> listOperations = new ArrayList<>();
        Customer customer = new Customer();
        StringBuilder sqlsb = new StringBuilder("SELECT operid, customerName, userName, opertype, operstatus, dateregistration").
                append(" FROM operations o").
                append(" left join customers c ON o.customerID = c.customerid").
                append(" left join users u ON o.userID = u.userid");

        try (
                Connection conn = ds.getConnection();
                Statement stat = conn.createStatement();
                ResultSet rs = stat.executeQuery(sqlsb.toString());) {

            while (rs.next()) {
                int opId = rs.getInt(1);

                String custoString = customer.getName()                 ;
                String customerName = rs.getString(2);
               

                User user = null;
                String userName = rs.getString(3);

                OperationType opType = null;
                String operType = rs.getString(4);
                switch (operType) {
                    case "Alungire":
                        opType = OperationType.ALUNGIRE;
                        break;
                    case "Corectie":
                        opType = OperationType.CORECTIE;
                        break;
                    case "Acoperire":
                        opType = OperationType.ACOPERIRE;
                        break;
                    case "Manichiura clasicÄƒ":
                        opType = OperationType.CLASICA;
                        break;
                }

                OperationStatus opStatus = null;
                String operStatus = rs.getString(5);
                switch (operStatus) {
                    case "Inregistrat":
                        opStatus = OperationStatus.INREGISTRAT;
                        break;
                    case "Amanat":
                        opStatus = OperationStatus.AMANAT;
                        break;
                    case "Deservit":
                        opStatus = OperationStatus.DESERVIT;
                        break;
                    case "Anulat":
                        opStatus = OperationStatus.ANULAT;
                        break;
                    case "Absent":
                        opStatus = OperationStatus.ABSENT;
                        break;
                }
                LocalDate data = rs.getDate(6).toLocalDate();

                Operation operation = new Operation(opId, data, customer, user, opStatus, opType);
                listOperations.add(operation);
            }

        } catch (Exception e) {
            LOG.severe(e.toString());
            throw new SQLException(e.getMessage());
        }

        return listOperations;
    }

    @Override
    public List<Operation> getOperations(LocalDate date) throws SQLException {

        return null;
    }

    public Customer findByName(String nameC) throws SQLException {

        StringBuilder sbsql = new StringBuilder("SELECT customerName FROM customers WHERE customerName").
                append(" like '" + nameC + "%'");

        Customer customer = null;

        try (
                Connection conn = ds.getConnection();
                Statement stat = conn.createStatement();
                ResultSet rs = stat.executeQuery(sbsql.toString());) {

            if (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                String phone = rs.getString(3);
                String email = rs.getString(4);

                customer = new Customer(id, name, phone, email);
            } else {
                throw new SQLException(" Customer is NULL ");
            }
        } catch (Exception e) {
            LOG.severe(e.toString());
            throw new SQLException(e.getMessage());
        }
        return customer;
    }
}
